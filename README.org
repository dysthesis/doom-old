#+title: Doom Emacs configuration
#+auto_tangle: t

*Note.* Any changes to =init.el= or =packages.el= must be made here. Otherwise, it will be overwritten whenever this file is tangled.

This file is the initial landing page for this repository, as well as a literate configuration for =init.el= and =packages.el=, meaning that the contents of these two files are extracted from here, and that this document contains notes, information, and commentary on those files. Doom Emacs is able to find a =config.org= file and extract it to =config.el=, so that is handled separately.

* Init.el
The =init.el= is the initialisation file which the Emacs will first read before the other files. In Doom Emacs, this is used to define the preconfigured modules to be used. These preconfigured modules comes with Doom Emacs itself. You can find the =init.el= file [[file:./init.el][here]].

This file controls what Doom modules are enabled and what order they load in. Remember to run =doom sync= after modifying it!

*NOTE:* Press =SPC h d h= (or =C-h d h= for non-vim users) to access Doom's documentation. There you'll find a link to Doom's Module Index where all of our modules are listed, including what flags they support.

*NOTE:* Move your cursor over a module's name (or its flags) and press =K= (or =C-c c k= for non-vim users) to view its documentation. This works on flags as well (those symbols that start with a plus).

Alternatively, press =gd= (or =C-c c d=) on a module to browse its directory (for easy access to its source code).

** Input
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

** Completion
#+begin_src emacs-lisp :tangle init.el
       :completion
       (company +childframe)           ; the ultimate code completion backend
       ;;(helm +childrame +fuzzy +icons)              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;; ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future
#+end_src

** UI
#+begin_src emacs-lisp :tangle init.el
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing
#+end_src

** Editor
#+begin_src emacs-lisp :tangle init.el
       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

** Emacs
#+begin_src emacs-lisp :tangle init.el
       :emacs
       (dired +icons)             ; making dired pretty [functional]
       ;; electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

** Terminal
#+begin_src emacs-lisp :tangle init.el
       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src

** Checkers
#+begin_src emacs-lisp :tangle init.el
       :checkers
       (syntax +childframe)              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make
#+end_src

** Tools
#+begin_src emacs-lisp :tangle init.el
       :tools
       ;;ansible
       (biblio +icons)            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

** Operating system
#+begin_src emacs-lisp :tangle init.el
       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience
#+end_src

** Languages
#+begin_src emacs-lisp :tangle init.el
:lang
;;agda              ; types of types of types of types...
(beancount +lsp)         ; mind the GAAP
(cc +lsp)         ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(graphql +lsp)    ; Give queries a REST
(haskell +lsp)    ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
(json +lsp)              ; At least it ain't XML
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
(javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex +lsp +fold +latexmk +cdlatex)             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
(lua +lsp)               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
(nix +tree-sitter +lsp)               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam2 +noter +journal)               ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;; plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python +pyright +lsp)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
;;zig               ; C, but simpl
#+end_src

** Email
#+begin_src emacs-lisp :tangle init.el
       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)
#+end_src

** App
#+begin_src emacs-lisp :tangle init.el
       :app
       ;;calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

** Configuration
#+begin_src emacs-lisp :tangle init.el
       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Config.el
This is the main configuration file for Doom Emacs. Here, you will find all user-defined configurations, those that are not part of Doom Emacs' default modules. Doom Emacs allows you to optionally use a =config.org= instead, however, which it will tangle to produce the =config.el=. This allows users to make their configurations literate, which I have done. You can find the =config.org= file [[file:./config.org][here]].

* Packages.el
This file contains the list of additional packages that Doom Emacs should install. To install a package with Doom Emacs, you must declare them here and then run =doom sync= on the command line, or use =M-x doom/reload=.

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(unpin! apheleia)
(package! pinentry)
(package! preview-dvisvgm)
(package! rainbow-mode)
(package! catppuccin-theme)
(package! org-wild-notifier)
(package! org-super-agenda)
(package! org-modern)
(package! org-roam)
(package! org-roam-ui)
(package! org-ql)
(package! autothemer)
(package! org-noter)
(package! org-pdftools)
(package! org-noter-pdftools)
(package! org-appear)
(package! bibtex-completion)
(package! nov)
(package! org-ref)
(package! org-fragtog-mode
  :recipe (:host github :repo "io12/org-fragtog"))
(package! org-auto-tangle)
(package! citar)
(package! lsp-ui)
(package! citar-org-roam)
(package! aggressive-indent-mode)
(package! vertico-posframe)
(package! websocket)
(package! mixed-pitch)
(package! elfeed-score)
(package! olivetti)
(package! doct
  :recipe (:host github :repo "progfolio/doct"))
(package! org-modern-indent
  :recipe (:host github :repo "jdtsmith/org-modern-indent"))
(package! imenu-list)
(package! consult)
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

** Installing a package from MELPA, ELPA, or emacsmirror
 To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp
(package! some-package)
#+end_src

** Installing a package from a remote git repository
 To install a package directly from a remote git repo, you must specify a =:recipe=. You'll find documentation on what `:recipe' accepts here: https://github.com/radian-software/straight.el#the-recipe-format

#+begin_src emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

*** Packages without a PACKAGENAME.el file or located in a subdirectory of the repository
If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a subdirectory of the repo, you'll need to specify =:files= in the =:recipe=:
#+begin_src emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

*** Installing from a different branch of the repository
Specify a =:branch= to install a package from a particular branch or tag. This is required for some packages whose default branch isn't 'master' (which our package manager can't deal with; see radian-software/straight.el#279)
#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src

** Disabling a built-in package
If you'd like to disable a package included with Doom, you can do so here with the `:disable' property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src

** Overriding the recipe of a built-in package
You can override the recipe of a built in package without having to specify all the properties for `:recipe'. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

** Pinning a package to a specific commit
Use =:pin= to specify a particular commit to install.

#+begin_src emacs-lisp
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

** Unpinning built-in packages
Doom's packages are pinned to a specific commit and updated from release to release. The `unpin!' macro allows you to unpin single packages...
#+begin_src emacs-lisp
(unpin! pinned-package)
#+end_src

...or multiple packages
#+begin_src emacs-lisp
(unpin! pinned-package another-pinned-package)
#+end_src

...Or *all* packages (NOT RECOMMENDED; will likely break things)
#+begin_src emacs-lisp
(unpin! t)
#+end_src
